import { useState, useEffect } from "react";
import { Button, Container, Col, Modal, Row } from 'react-bootstrap';

import Head from "next/head";
import { parkingLotData } from "../../components/pakinglotdata";
import Car from "../../components/car";
import { ParkingSlot } from "../../components/parkingslot";
import { InfoBoard } from "../../components/infoboard";
import FeeMdodal from "../../components/fee";
import FullParkingWarning from "../../components/warning";

import "bootstrap/dist/css/bootstrap.min.css";

import generateNumberPlate from "../../utils/generateNumberPlate";
import generateCarSize from "../../utils/randomizeSize";
import generateCarDetails from "../../utils/generateCar";

const ROW_LIMIT = 4;

export default function Main({ slotsCount }) {
  const [carDetails, setCarDetails] = useState(null);
  const [showFeeDialog, setShowFeeDialog] = useState(false);
  const [parkingLot, setParkingLot] = useState(parkingLotData);
  const [availableSlots, setAvailableSlots] = useState(slotsCount);
  const [rows, setRows] = useState([]);
  const [infoBoardVisible, setInfoBoardVisible] = useState(false);
  const [parkingSlotSize, setParkingSlotSize] = useState(null);
  const [parkingFull, setParkingFull] = useState(false);

  useEffect(() => {
    function distributeSlotsToRows() {
      let rowsCount = Math.ceil(slotsCount / ROW_LIMIT);
      const rows = [];
      let row = [];

      while (slotsCount > 0 && rowsCount > 0) {
        // It's important first to decrement the count of the slots otherwise we will miss one
        slotsCount--;
        const slot = parkingLot[slotsCount];

        const isSlotTaken = slot.parked !== false && slot !== undefined;
        row.push({
          slotNum: slotsCount,
          isBusy: isSlotTaken,
          carDetail: slot.details
        });

        if (slotsCount % ROW_LIMIT === 0) {
          rowsCount--;
          rows.push(row);
          row = [];
        }
        setRows(rows);
      }
    }

    distributeSlotsToRows();
  }, [slotsCount, availableSlots]);

  const getAvailable = () => {
    const availableSlots = parkingLot.filter((s) => s.parked === false).length;
    console.log(`Available parking slots: ${availableSlots}`);
    return availableSlots;
  }

  const park = (carObj) => {
    if (parkingLot.every((slot) => slot.parked !== false && slot.size < carObj.size )) {
      return false;
    }
    console.log(`Parking car: ${carObj.plate}`);

    const pkSlotIndex = parkingLot.findIndex(slot => slot.parked === false && carObj.size <= slot.size)

    if (pkSlotIndex >= 0 ) {
      parkingLot[pkSlotIndex].parked = true
      parkingLot[pkSlotIndex].details = carObj
      setParkingLot(parkingLot)
      setCarDetails(null)
    } else {
      setParkingFull(true)
    }
  }

  const remove = (carObj) => {
    if (parkingLot.every((slot) => slot.parked === false && slot.details === null)) {
      return false;
    }

    console.log(`Leaving car: ${carObj.plate}`);

    const pkSlotIndex = parkingLot.findIndex(slot => slot.parked === true && carObj.plate === slot.details.plate)

    setParkingSlotSize(parkingLot[pkSlotIndex].size)
    setShowFeeDialog(true);

    if (pkSlotIndex >= 0 ) {
      parkingLot[pkSlotIndex].parked = false
      parkingLot[pkSlotIndex].details = null
    }
  }

  const handleAddToParking = (carObj) => {
    if (getAvailable() === 0) {
      setInfoBoardVisible(true);
      setParkingFull(true)
      return;
    }
    park(carObj);
    setAvailableSlots(getAvailable());
  };

  const handleRemoveFromParking = (carObj) => {
    if (carObj) {
      remove(carObj);
      setAvailableSlots(getAvailable());
    }
  };

  const handleGenerateCar = () => {
    if (getAvailable() === 0) {
      setInfoBoardVisible(true);
      setParkingFull(true)
      return;
    }
    
    const carModel = generateCarDetails(generateCarSize())
    const carObject = { plate: generateNumberPlate(), ...carModel }

    setCarDetails(carObject)
    console.log(carObject)
  }

  const handleCloseFeeDialog = () => setShowFeeDialog(!showFeeDialog);

  const handleCloseFullParkingDialog = () => {
    setParkingFull(!parkingFull);
    setCarDetails(null)
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container fluid>
        <Row>
          <Col xs={2}>
            <Row>
              <Col>
                <InfoBoard availableSlotsCount={availableSlots} />

                {/* carDetails, handleGenerateCar, handleAddToParking  */}
                <Button
                  variant="success"
                  onClick={handleGenerateCar}
                  disabled={carDetails}
                  size="lg"
                >
                    Generate car
                </Button>
                <Button
                  variant="primary"
                  onClick={() => handleAddToParking(carDetails)}
                  disabled={!carDetails}
                  className='ms-2'
                  size="lg"
                >
                  Park the car
                </Button>
              </Col>
            </Row>
            <Row>
              <Col>
                {
                  carDetails && <Car details={carDetails} />
                }

              </Col>
            </Row>
            <Row>
              {
                showFeeDialog === true && parkingSlotSize !== null &&
                <Modal
                  show={showFeeDialog}
                  onHide={handleCloseFeeDialog}
                >
                  <FeeMdodal parkingSlotSize={parkingSlotSize} />
                </Modal>
              }
              {
                parkingFull === true &&
                <Modal
                  show={parkingFull}
                  onHide={handleCloseFullParkingDialog}
                >
                  <FullParkingWarning />
                </Modal>
              }

            </Row>
          </Col>
          <Col>
            {rows.map((row, idx) => (
              <Row 
                key={row + idx}
                style={{ margin: '0 0.5rem'}}
                className='d-flex'
              >
                {row.map(({ slotNum, isBusy, carDetail }) => (
                  <ParkingSlot
                    remove={handleRemoveFromParking}
                    key={slotNum + idx}
                    num={slotNum}
                    isBusy={isBusy}
                    carDetail={carDetail}
                  />
                ))}
              </Row>
            ))}
          </Col>
        </Row>
      </Container>
    </div>
  )
}
